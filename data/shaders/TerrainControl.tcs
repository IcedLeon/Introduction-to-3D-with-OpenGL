#version 440 core
#extension GL_ARB_tessellation_shader : enable
//Control shader
//The tassellation controll shader run through once per input patch, in this example it compute the algorithm for the
//LOD (level of detail) and perform frustum culling.
precision mediump float;

layout (vertices = 1) out;

in gl_PerVertex
{
	vec4 gl_Position;
} gl_in[];

layout (location = 1) in block
{
	mediump vec2 Tex_Coord;
} In[];

out gl_PerVertex
{
	vec4 gl_Position;
} gl_out[];

layout (location = 1) out block
{
	mediump vec2 Tex_Coord;
	vec2 Tess_Level_Inner;
} Out[];

//layout (location = 1) out vec2 Tess_Level_Inner[]; //Nope... nope.. nope..

uniform mat4 Projection;
uniform mat4 View;
uniform mat4 VP;
uniform vec4 Viewport;
uniform vec4 FrustumPlanes[6];
uniform vec3 TileSize;
uniform float InnerTessFactor;
uniform float OuterTessFactor;
uniform float TriSize;
uniform float HeightScale;
uniform float TileBoundSphereR;
uniform bool Cull;
uniform bool LOD;

//Testing if sphere is entirely contained within frustum planes.
bool IsSphereFrosted(vec3 pos, float r, vec4 planes[6])
{
	for (int i = 0; i < 6; ++i)
	{
		if (dot(vec4(pos, 1.0), planes[i]) + r < 0.0)
		{
			//sphere is outside the plane
			return false;
		}
	}
	return true;
}

//Transformation from world to screen space.
vec2 WorldToScreen(vec3 pos)
{
	vec4 r = VP * vec4(pos, 1.0); //To clip space.
	r.xy /= r.w; //Project it
	r.xy = r.xy * 0.5 + 0.5; //to normalized device coordinates
	r.xy *= Viewport.zw; //to pixel
	return r.xy;
}

//Calculate edge tesselation level from two edge vertices in screen space
float CalcEdgeTessellation(vec2 s0, vec2 s1)
{
	float dist = distance(s0, s1);
	return clamp(dist / TriSize, 1, 64);
}

//This function transform the eye(view) to screen space 
vec2 EyeToScreen(vec4 pos)
{
	vec4 r = Projection * pos; //To clip space
	r.xy /= r.w; //Project
	r.xy = r.xy * 0.5 + 0.5; //to normalized device coordinates
	r.xy *= Viewport.zw; //to pixel
	return r.xy;
}

//Edge tessellation level is calculated by fitting sphere to edge
float CalcEdgeTessellationSphere(vec3 w0, vec3 w1, float diameter)
{
	vec3 center = (w0 + w1) * 0.5;
	vec4 view0 = View * vec4(center, 1.0);
	vec4 view1 = view0 + vec4(diameter, 0.0, 0.0, 0.0);
	vec2 s0 = EyeToScreen(view0);
	vec2 s1 = EyeToScreen(view1);
	return CalcEdgeTessellation(s0, s1);
}

void main()
{
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	Out[gl_InvocationID].Tex_Coord = In[gl_InvocationID].Tex_Coord;

	//Bounding sphere for the current patch
	vec3 spherePos = gl_in[gl_InvocationID].gl_Position.xyz + vec3(TileSize.x, HeightScale, TileSize.z) * 0.5;

	//Test if the patch is visible.
	bool visible = IsSphereFrosted(spherePos, TileBoundSphereR, FrustumPlanes);

	if (Cull && !visible)
	{
		//Culling of the outer patch
		gl_TessLevelOuter[0] = -1;
		gl_TessLevelOuter[1] = -1;
		gl_TessLevelOuter[2] = -1;
		gl_TessLevelOuter[3] = -1;
		//Culling of the inner patch
		gl_TessLevelInner[0] = -1;
		gl_TessLevelInner[1] = -1;
	}
	else
	{
		if (LOD)
		{
			//We start with calculatin the edge tessellation lesvels
			//Ref: OpenGL 4 shading language cookbook chapter 6.
			vec3 v0 = gl_in[0].gl_Position.xyz;
			vec3 v1 = v0 + vec3(TileSize.x, 0.0, 0.0);
			vec3 v2 = v0 + vec3(TileSize.x, 0.0, TileSize.z);
			vec3 v3 = v0 + vec3(0, 0, TileSize.z);
#if 0
			//This method should understimate tessellation levl when looking along the edge.
			vec2 s0 = WorldToScreen(v0);
			vec2 s1 = WorldToScreen(v1);
			vec2 s2 = WorldToScreen(v2);
			vec2 s3 = WorldToScreen(v3);

			gl_TessLevelOuter[0] = CalcEdgeTessellation(s3, s0);
			gl_TessLevelOuter[1] = CalcEdgeTessellation(s0, s1);
			gl_TessLevelOuter[2] = CalcEdgeTessellation(s1, s2);
			gl_TessLevelOuter[3] = CalcEdgeTessellation(s2, s3);
#else
			//Use screen space size of sphere to fit each edge.
			float sphereDiam = TileSize.z * 2.0f;
			gl_TessLevelOuter[0] = CalcEdgeTessellationSphere(v3, v0, sphereDiam);
			gl_TessLevelOuter[1] = CalcEdgeTessellationSphere(v0, v1, sphereDiam);
			gl_TessLevelOuter[2] = CalcEdgeTessellationSphere(v1, v2, sphereDiam);
			gl_TessLevelOuter[3] = CalcEdgeTessellationSphere(v2, v3, sphereDiam);
#endif
			//Now we should care about the inner tassellation, using the average of outer levels.
			gl_TessLevelInner[0] = 0.5 * (gl_TessLevelOuter[1] + gl_TessLevelOuter[3]);
			gl_TessLevelInner[1] = 0.5 * (gl_TessLevelOuter[0] + gl_TessLevelOuter[2]);

			Out[gl_InvocationID].Tess_Level_Inner = vec2(gl_TessLevelInner[0], gl_TessLevelInner[1]);
		}
		else
		{
			gl_TessLevelOuter[0] = OuterTessFactor;
			gl_TessLevelOuter[1] = OuterTessFactor;
			gl_TessLevelOuter[2] = OuterTessFactor;
			gl_TessLevelOuter[3] = OuterTessFactor;
			
			gl_TessLevelInner[0] = InnerTessFactor;
			gl_TessLevelInner[1] = InnerTessFactor;
			
			Out[gl_InvocationID].Tess_Level_Inner = vec2(InnerTessFactor);
		}
	}
}